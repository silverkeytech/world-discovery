@page "/"
@using WorldDiscovery.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Index</PageTitle>

<nav class="navbar navbar-expand-lg bg-body-tertiary">
    <div class="container-fluid">
        <div>
            <img src="https://drive.google.com/uc?export=view&id=112ekDarKNkVxPk-iqvFuAxg1ykHgOzJq" alt="World Discovery Logo" class="logo" />
            <span class="navbar-brand" @onclick='() => NavigationManager.NavigateTo("/")'>WorldDiscovery</span>
        </div>
        <div>
            @*<AuthorizeView>
                <Authorized>
                    <button class="btn btn-danger profile" @onclick='() => NavigationManager.NavigateTo("/user-profile")'>MS</button>
                </Authorized>
                <NotAuthorized>
                    <button class="btn btn-danger" @onclick='() => NavigationManager.NavigateTo("/login")'>Login</button>
                </NotAuthorized>
            </AuthorizeView>*@
            <button class="btn btn-danger profile" @onclick='() => NavigationManager.NavigateTo("/user-profile")'>MS</button>
        </div>
    </div>
</nav>

<div class="search-section">
    <div class="input-group mb-3 search-field">
        <input type="text" class="form-control" placeholder="Search..." aria-label="Recipient's username" aria-describedby="button-addon2">
        <button class="btn btn-outline-secondary" type="button" id="button-addon2">Go</button>
    </div>
    @*<input type="color" id="favcolor" name="favcolor" value="#ff0000"><br><br>*@
</div>


@if (_places.Count > 0)
{
    <div class="results-background">
        <h2 class="latest-updates">Our latest updates</h2>
        <div class="results-section">
            @foreach (var item in _places)
            {
                <PlaceCard Place=@item />
            }
        </div>
    </div>
}
else
{
    <div class="results-background error-container">
        <h2 class="text-danger error-msg">@_errorMessage</h2>
    </div>
}


@code {
    private List<Place> _places = new();
    private string _errorMessage { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync("/place/get-places");

        if (response.IsSuccessStatusCode)
        {
            string json = await response.Content.ReadAsStringAsync();
            _places = JsonSerializer.Deserialize<List<Place>>(json);

            if (_places != null && _places.Count <= 0)
                _errorMessage = "No places found. Be the first to share your experience!";
        }
        else
        {
            _errorMessage = "Something went wrong. Please try again!";
        }
    }
}