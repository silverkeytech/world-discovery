@page "/login"
@using WorldDiscovery.Shared
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>

<div class="login-page">
    <div class="login-container">
        <div @onclick="() => goBack()">
            <img src="https://drive.google.com/uc?export=view&id=1_TBKgcGXylebxX0974RgBVeYKjo7rlev" alt="close" class="close-logo" />
        </div>
        <div class="login-header">
            <img src="https://drive.google.com/uc?export=view&id=112ekDarKNkVxPk-iqvFuAxg1ykHgOzJq" alt="World Discovery Logo" class="logo" />
            <h3>Sign in to WorldDiscovery</h3>
        </div>
        <div class ="login-form">
            <EditForm Model="_loginInput" OnSubmit="HandleLoginSumbit">
                <div class="mb-3">
                    <label for="inputEmail" class="form-label">Email address</label>
                    <InputText type="email" class="form-control" id="inputEmail" @bind-Value=_loginInput.Email required />
                </div>
                <div class="mb-3">
                    <label for="inputPassword" class="form-label">Password</label>
                    <InputText type="password" class="form-control" id="inputPassword" @bind-Value=_loginInput.Password required />
                </div>
                <div class="text-danger error-msg">@_errorMessage</div>
                <button type="submit" class="btn btn-danger login-submit">Sign In</button>
                <div class="no-account">
                    <p>Don't have an account? <span class="sign-up" @onclick='() => NavigationManager.NavigateTo("/sign-up")'>Sign Up</span></p>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginInput _loginInput { get; set; } = new();
    private string _errorMessage { get; set; } = "";

    private async Task goBack()
    {
        await JSRuntime.InvokeVoidAsync("goBack");
    }

    public async Task HandleLoginSumbit()
    {
        Console.WriteLine($"-------- Login Credentials are {_loginInput.Email}, {_loginInput.Password}");

        var json = JsonSerializer.Serialize(_loginInput);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        var response = await Http.PostAsync("/auth/login", content);

        switch (response.StatusCode)
        {
            case HttpStatusCode.OK:
                NavigationManager.NavigateTo("/");
                break;
            case HttpStatusCode.BadRequest:
                _errorMessage = "Email address and password are required.";
                break;
            case HttpStatusCode.Unauthorized:
                _errorMessage = "Invalid email address or password.";
                break;
            default:
                _errorMessage = "Something went wrong. Please try again later!";
                break;
        }
    }
}
